{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+NCNb,06MA+JeC,UA9IF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAAK,mBAA7CC,EAAW,KAAEC,EAAc,KAClC,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GACD,mBAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,KA2CrCC,EAAiB,uCAAG,WAAOC,GAAK,2EACb,GAAvBA,EAAMC,kBAEFjB,EAAY,CAAD,yCAEgBK,EACzBa,gDACA,OACAC,KAAKC,UAAU,CACbZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAEtC,CACE,eAAgB,qBAElB,KAAD,EAVKa,EAAY,OAWlB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,gFAQG,OARH,WAI9CC,EAAW,IAAIC,UACZC,OAAO,QAAShB,EAAUS,OAAOb,MAAMC,OAChDiB,EAASE,OAAO,OAAQhB,EAAUS,OAAOQ,KAAKpB,OAC9CiB,EAASE,OAAO,WAAYhB,EAAUS,OAAOV,SAASF,OACtDiB,EAASE,OAAO,QAAShB,EAAUS,OAAOS,MAAMrB,OAAO,UAE5BJ,EACzBa,iDACA,OACAQ,GACA,KAAD,GAJKJ,EAAY,OAMlB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,oHAGzD,gBAnCsB,sCAqCvB,OACE,kBAAC,IAAMM,SAAQ,KACb,kBAAC,IAAU,CAAC3B,MAAOA,EAAO4B,QAAS1B,IACnC,kBAAC,IAAI,CAACd,UAAU,kBACbW,GAAa,kBAAC,IAAc,CAAC8B,WAAS,IACvC,4BAAI,kBACJ,6BACA,0BAAMC,SAAUnB,IACZf,GACA,kBAAC,IAAK,CACJmC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS7B,KAGXb,GACA,kBAAC,IAAW,CACV2C,QAAM,EACNP,GAAG,QACHM,QAAS7B,EACT4B,UAAU,6BAGd,kBAAC,IAAK,CACJN,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAAS7B,IAEX,kBAAC,IAAK,CACJsB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS7B,IAEX,kBAAC,IAAM,CAACwB,KAAK,SAASS,UAAWlC,EAAUF,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAM,CAAC+C,SAAO,EAACC,QAnHI,WACnBhD,EAUHc,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,KAAM,CACJpB,MAAO,GACPC,SAAS,GAEXoB,MAAO,CACLrB,MAAO,KACPC,SAAS,MAGb,GArBFI,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,UAAMoB,EACNnB,WAAOmB,IAETrC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAkBhET,GAAe,SAACiD,GAAQ,OAAMA,OAyFkB,aAC/BlD,EAAc,SAAW","file":"static/js/7.d182819f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\n\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image.\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n\r\n"],"sourceRoot":""}